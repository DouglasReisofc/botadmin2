<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Painel Multi-Inst√¢ncias WhatsApp</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    body { margin:0; font-family:Segoe UI,Arial,sans-serif; background:#121420; color:#fff }
    .wrap { max-width:900px; margin:40px auto; padding:24px; background:#1f2336; border-radius:12px }
    h2 { text-align:center; color:#ffc600; margin-top:0 }
    .row { display:flex; gap:8px; margin-bottom:12px }
    .row input { flex:1; padding:10px 12px; border:none; border-radius:8px; background:#28304d; color:#ffc600 }
    .row button { padding:10px 16px; border:none; border-radius:8px; background:#2fd471; color:#121420; cursor:pointer }
    .help { font-size:.9em; color:#9aa3c9; margin-bottom:16px }
    table { width:100%; border-collapse:collapse; font-size:.93em }
    th, td { padding:10px; text-align:center }
    th { background:#27304e; color:#ffc600 }
    td { background:#20263c; border-bottom:1px solid #1b2133 }
    .badge { display:inline-block; padding:3px 10px; border-radius:10px; font-weight:bold; }
    .conectado { background:#1fe58e20; color:#2fd471 }
    .desconectado { background:#fd536020; color:#fd5360 }
    .aguardando_pareamento { background:#ffc60040; color:#ffef81 }
    .inicializando { background:#32508070; color:#54b1ff }
    .reiniciando { background:#5465ff80; color:#6db2ff }
    .btn { width:34px; height:34px; border:none; border-radius:50%; background:#3a4164; color:#fff; cursor:pointer }
    .btn:hover { background:#515a7a }
    #modal { display:none; position:fixed; inset:0; background:rgba(0,0,0,0.7); align-items:center; justify-content:center }
    #modal>div { background:#1f2336; padding:24px; border-radius:12px; text-align:center; max-width:90vw }
    #modal pre { font-size:1.8em; color:#ffc600; letter-spacing:4px; margin:16px 0 }
    #modal button { margin-top:12px; padding:8px 16px; border:none; border-radius:8px; background:#fd5360; color:#fff; cursor:pointer }
    #modal button:hover { background:#d43c4a }
    .codigo  { white-space:pre-wrap;background:#ffca28;color:#000;padding:1rem;border-radius:8px;font-size:1.25rem;word-break:break-word; }
    .tip     { display:block;margin-top:.5rem;font-size:.9rem;color:#fff; }
    .qr-img  { width:240px;height:240px;border:4px solid #fff;border-radius:10px;box-shadow:0 0 12px rgba(0,0,0,.3); }
    .copy-btn{ margin-top:.6rem;padding:.4rem .8rem;border:none;border-radius:6px;background:#3a4164;color:#fff;cursor:pointer; }
  </style>
<%- include("partials/analytics") %>
</head>
<body>
  <div class="wrap">
    <h2>Painel WhatsApp Multi-Inst√¢ncias</h2>

    <div class="row">
      <input id="apikey" placeholder="API Key" value="AIAO1897AHJAKACMC817ADOU">
    </div>

    <div class="row">
      <input id="instanceInput" placeholder="N√∫mero (ex: 5511912345678)">
      <button id="btnAdd">Adicionar / Iniciar</button>
    </div>

    <div class="help">
      Use sua API Key para autenticar todas as a√ß√µes. Clique em üîó para mostrar o QR-code.
    </div>

    <table>
      <thead>
        <tr>
          <th>N√∫mero</th><th>Status</th><th>QR</th><th>A√ß√µes</th>
        </tr>
      </thead>
      <tbody id="tbl"></tbody>
    </table>
  </div>

  <!-- Modal QR -->
  <div id="modal">
    <div>
      <h3 id="m-title" style="margin-top:0;color:#ffc600"></h3>
      <pre id="m-qr">Aguardando...</pre>
      <button onclick="closeModal()">Fechar</button>
    </div>
  </div>

  <script>
    const $ = s => document.querySelector(s);
    const baseUrl = '<%= siteUrl %>/api';

    function getHeaders() {
      const key = $('#apikey').value.trim();
      return { 'x-api-key': key, 'x-instance-key': key };
    }

    async function refresh() {
      const res = await fetch(`${baseUrl}/instances`, { headers: getHeaders() });
      const data = await res.json();
      const tbl = $('#tbl');
      tbl.innerHTML = '';
      (data.instances || []).forEach(info => {
        const status = info.connected ? 'conectado' : 'desconectado';
        tbl.insertAdjacentHTML('beforeend', `
          <tr>
            <td><b>${info.name}</b></td>
            <td><span class="badge ${status}">${status}</span></td>
            <td><button class="btn" onclick="showQR('${info.name}')">üîó</button></td>
            <td>
              <button class="btn" style="background:#fd5360" onclick="call('${info.name}','logout')">‚èè</button>
              <button class="btn" style="background:#ffbd4d" onclick="call('${info.name}','restart')">‚ôªÔ∏è</button>
              <button class="btn" style="background:#3a4164" onclick="call('${info.name}','delete')">üóë</button>
            </td>
          </tr>`);
      });
    }

    $('#btnAdd').onclick = async () => {
      const num = $('#instanceInput').value.replace(/\D/g,'');
      if (!num) return alert('N√∫mero inv√°lido');
      const res = await fetch(`${baseUrl}/instance`, {
        method: 'POST',
        headers: { ...getHeaders(), 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: num, webhook: '<%= siteUrl %>/webhook/event', apiKey: $('#apikey').value.trim() })
      });
      const j = await res.json();
      if (!j.status && !j.name) return alert(j.error||'Falha ao criar inst√¢ncia');
      await refresh();
      showQR(num);
    };

    async function call(num, action) {
      if (action==='logout' && !confirm('Desconectar?')) return;
      if (action==='restart'&& !confirm('Reiniciar?'))  return;
      if (action==='delete' && !confirm('Remover?'))   return;
      if(action==='delete' || action==='logout'){
        await fetch(`${baseUrl}/instance/${num}`, { method:'DELETE', headers:getHeaders() });
      }else if(action==='restart'){
        await fetch(`${baseUrl}/instance/${num}/restart`, { method:'POST', headers:getHeaders() });
      }
      refresh();
    }

    let qrInterval;
    async function showQR(num) {
      const box = $('#m-qr');
      box.textContent = '‚åõ Gerando c√≥digo...';
      $('#m-title').textContent = 'Pareamento '+num;
      $('#modal').style.display = 'flex';
      let modo = null;

      try {
        await fetch(`${baseUrl}/instance/${num}/reconnect`, { method:'POST', headers:getHeaders() });
        const res = await fetch(`${baseUrl}/instance/${num}/qr`, { headers:getHeaders() });
        const data = await res.json();
        if (data.qr) {
          box.innerHTML = `<img src="${data.qr}" alt="QR Code" class="qr-img" onerror="this.parentElement.textContent='‚ùå Falha ao carregar QR';" />`;
          startWatch(num);
        } else {
          box.textContent = '‚ùå QR indispon√≠vel';
        }
      } catch (e) {
        console.error('[qrcode] erro', e);
        box.textContent = '‚ùå Erro ao obter QR';
      }
    }

    function startWatch(num){
      clearInterval(qrInterval);
      qrInterval = setInterval(async ()=>{
        const res = await fetch(`${baseUrl}/instance/${num}/status`, { headers:getHeaders() });
        const j   = await res.json();
        if(j.status === 'connected'){
          $('#m-qr').textContent = '‚úÖ Conectado!';
          clearInterval(qrInterval);
          setTimeout(() => { closeModal(); refresh(); }, 600);
        }
      }, 1000);
    }

    function copyPair(){
      const code = $('#pairCode').textContent;
      navigator.clipboard.writeText(code);
    }

    function closeModal() {
      $('#modal').style.display = 'none';
      clearInterval(qrInterval);
    }

    $('#apikey').addEventListener('change', refresh);
    window.onload = refresh;
  </script>
</body>
</html>
