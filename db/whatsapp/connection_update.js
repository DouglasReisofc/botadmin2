// Handler para eventos de connection.update do Baileys
const { BotApi } = require('../botApi');
const moment = require('moment-timezone');

// Rate limiting para atualiza√ß√µes do banco - evitar spam de updates
const updateLimiter = new Map();
const UPDATE_COOLDOWN = 2000; // 2 segundos entre atualiza√ß√µes do mesmo tipo

module.exports = async function handleConnectionUpdate({ event, data, server_url, apikey, instance }) {
    try {
        // Valida√ß√£o b√°sica dos dados
        if (!instance || !data) {
            console.warn('‚ö†Ô∏è Dados inv√°lidos recebidos no connection.update handler');
            return;
        }

        console.log(`[${instance}] üîó Processando connection.update:`, {
            connection: data.connection,
            lastDisconnect: data.lastDisconnect?.error?.message,
            qr: data.qr ? 'QR dispon√≠vel' : 'Sem QR',
            pairingCode: data.pairingCode ? 'C√≥digo dispon√≠vel' : 'Sem c√≥digo'
        });

        // Rate limiting para atualiza√ß√µes do banco
        const limitKey = `${instance}_${data.connection}`;
        const lastUpdate = updateLimiter.get(limitKey);
        const now = Date.now();

        if (lastUpdate && (now - lastUpdate) < UPDATE_COOLDOWN) {
            console.log(`[${instance}] ‚è±Ô∏è Rate limit ativo para connection.update - ignorando atualiza√ß√£o duplicada`);
            return;
        }

        // Atualizar status da inst√¢ncia no banco
        if (instance) {
            try {
                const updateData = {
                    lastSeen: new Date(),
                    sessionStatus: data.connection || 'unknown'
                };

                // Se conectou com sucesso, salvar informa√ß√µes adicionais
                if (data.connection === 'open') {
                    updateData.sessionStatus = 'conectado';
                    updateData.lastConnected = new Date();
                    updateData.lastError = null; // Limpar erro anterior

                    console.log(`[${instance}] ‚úÖ Conex√£o estabelecida com sucesso!`);
                }

                // Se desconectou, atualizar status
                if (data.connection === 'close') {
                    updateData.sessionStatus = 'desconectado';
                    updateData.lastDisconnected = new Date();

                    if (data.lastDisconnect?.error) {
                        updateData.lastError = data.lastDisconnect.error.message;

                        // Log espec√≠fico para diferentes tipos de erro
                        const errorCode = data.lastDisconnect.error.output?.statusCode;
                        if (errorCode) {
                            updateData.lastErrorCode = errorCode;
                            console.log(`[${instance}] ‚ùå Conex√£o encerrada - C√≥digo: ${errorCode}`);
                        }
                    }

                    console.log(`[${instance}] ‚ùå Conex√£o encerrada`);
                }

                // Se est√° conectando
                if (data.connection === 'connecting') {
                    updateData.sessionStatus = 'conectando';
                    console.log(`[${instance}] üîÑ Conectando...`);
                }

                // Atualizar rate limiter
                updateLimiter.set(limitKey, now);

                // Tentar atualizar o banco com retry
                await updateDatabaseWithRetry(instance, updateData);

                console.log(`[${instance}] üíæ Status atualizado no banco: ${updateData.sessionStatus}`);

            } catch (dbErr) {
                console.error(`[${instance}] ‚ùå Erro ao atualizar banco:`, dbErr.message);
            }
        }

        // Log detalhado para diferentes tipos de conex√£o
        if (data.qr) {
            console.log(`[${instance}] üì± QR Code gerado - aguardando escaneamento`);
        }

        if (data.pairingCode) {
            console.log(`[${instance}] üîë C√≥digo de pareamento: ${data.pairingCode}`);
        }

        if (data.connection === 'open') {
            console.log(`[${instance}] üéâ WhatsApp conectado com sucesso!`);

            // Log adicional se for um novo login
            if (data.isNewLogin) {
                console.log(`[${instance}] üÜï Novo login detectado`);
            }
        }

        if (data.connection === 'close' && data.lastDisconnect) {
            const reason = data.lastDisconnect.error?.message || 'Motivo desconhecido';
            const errorCode = data.lastDisconnect.error?.output?.statusCode;

            if (errorCode) {
                console.log(`[${instance}] üö™ Conex√£o encerrada: ${reason} (C√≥digo: ${errorCode})`);
            } else {
                console.log(`[${instance}] üö™ Conex√£o encerrada: ${reason}`);
            }
        }

    } catch (err) {
        console.error(`[${instance}] ‚ùå Erro no handler connection.update:`, err.message);
    }
};

// Fun√ß√£o auxiliar para atualizar banco com retry
async function updateDatabaseWithRetry(instance, updateData, maxRetries = 3) {
    let retries = 0;

    while (retries < maxRetries) {
        try {
            await BotApi.updateOne({ instance }, updateData, { upsert: true });
            return; // Sucesso
        } catch (err) {
            retries++;
            console.warn(`[${instance}] ‚ö†Ô∏è Tentativa ${retries}/${maxRetries} falhou ao atualizar banco:`, err.message);

            if (retries >= maxRetries) {
                throw err; // Re-throw ap√≥s esgotar tentativas
            }

            // Aguardar antes de tentar novamente
            await new Promise(resolve => setTimeout(resolve, 1000 * retries));
        }
    }
}

// Limpeza peri√≥dica do rate limiter para evitar vazamento de mem√≥ria
setInterval(() => {
    const now = Date.now();
    for (const [key, timestamp] of updateLimiter.entries()) {
        if (now - timestamp > UPDATE_COOLDOWN * 5) { // Limpar entradas antigas
            updateLimiter.delete(key);
        }
    }
}, 60000); // Limpeza a cada minuto
