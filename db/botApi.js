const mongoose = require('mongoose');

const botApiSchema = new mongoose.Schema({
    nome: {
        type: String,
        required: true
    },  // Nome da API para f√°cil identifica√ß√£o

    baseUrl: {
        type: String,
        required: true
    },  // URL base da API

    webhook: {
        type: String,
        default: ''
    }, // Webhook para envio dos eventos da inst√¢ncia

    globalapikey: {
        type: String,
        required: true
    },  // Chave de API global, que controla fun√ß√µes globais da inst√¢ncia

    apikey: {
        type: String,
        required: true
    },  // Chave de API da inst√¢ncia, usada para autenticar a inst√¢ncia do bot

    instance: {
        type: String,
        required: true,  // Agora obrigat√≥rio, √© o n√∫mero do WhatsApp ou nome da inst√¢ncia
        unique: true
    },

    server: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Server',
        required: true
    },

    gruposlimite: {
        type: Number,
        default: 5
    },  // Limite de grupos por inst√¢ncia da API

    status: {
        type: Boolean,
        default: true
    },  // Status geral da API (ativa ou n√£o)

    // üî• Dados da sess√£o WhatsApp vinculada
    sessionStatus: {
        type: String,
        enum: ['inicializando', 'conectado', 'desconectado', 'falha_auth'],
        default: 'desconectado'
    },

    pairingCode: {
        type: String,
        default: null
    },  // C√≥digo atual de pareamento (se houver)

    lastSeen: {
        type: Date,
        default: Date.now
    },

    createdAt: {
        type: Date,
        default: Date.now
    },

    updatedAt: {
        type: Date,
        default: Date.now
    },

    // üî• Identifica√ß√£o de quem √© dono da sess√£o
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'usuarios',
        default: null // Se null ‚Üí sess√£o global
    }

}, { versionKey: false });

module.exports.BotApi = mongoose.model('BotApi', botApiSchema);
