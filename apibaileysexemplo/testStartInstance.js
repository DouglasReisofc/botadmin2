const { startInstance, shutdownAllInstances, getInstancesStats, getSession, getInstanceStatus } = require('./sessions/sessionManager');

// Configura√ß√µes do teste
const TEST_CONFIG = {
    instanceName: 'test',
    usePairingCode: false,
    phoneNumber: null, // Definir se usar pairing code
    timeout: 300000 // 5 minutos para conectar
};

let isShuttingDown = false;

async function testStart() {
    try {
        console.log('üöÄ Iniciando teste da inst√¢ncia WhatsApp...');
        console.log('‚îÅ'.repeat(60));
        console.log(`üìã Configura√ß√µes do teste:`);
        console.log(`   ‚Ä¢ Nome da inst√¢ncia: ${TEST_CONFIG.instanceName}`);
        console.log(`   ‚Ä¢ Usar pairing code: ${TEST_CONFIG.usePairingCode}`);
        console.log(`   ‚Ä¢ N√∫mero (se pairing): ${TEST_CONFIG.phoneNumber || 'N/A'}`);
        console.log(`   ‚Ä¢ Timeout: ${TEST_CONFIG.timeout / 1000}s`);
        console.log('‚îÅ'.repeat(60));

        // Iniciar inst√¢ncia
        console.log(`\n[${TEST_CONFIG.instanceName}] üöÄ Iniciando inst√¢ncia de teste...`);

        const session = await startInstance(
            TEST_CONFIG.instanceName,
            TEST_CONFIG.usePairingCode,
            TEST_CONFIG.phoneNumber
        );

        if (TEST_CONFIG.usePairingCode && TEST_CONFIG.phoneNumber) {
            console.log(`\n[${TEST_CONFIG.instanceName}] üîë Modo pairing code ativado`);
            console.log(`[${TEST_CONFIG.instanceName}] üì± Aguarde o c√≥digo de pareamento aparecer...`);
        } else {
            console.log(`\n[${TEST_CONFIG.instanceName}] üì± Modo QR Code ativado`);
            console.log(`[${TEST_CONFIG.instanceName}] üì± Escaneie o QR Code com seu WhatsApp`);
        }

        // Monitorar status da conex√£o
        console.log(`\n[${TEST_CONFIG.instanceName}] ‚è±Ô∏è Aguardando conex√£o (timeout: ${TEST_CONFIG.timeout / 1000}s)...`);

        const startTime = Date.now();
        const checkInterval = setInterval(() => {
            if (isShuttingDown) {
                clearInterval(checkInterval);
                return;
            }

            const elapsed = Date.now() - startTime;
            const remaining = Math.max(0, TEST_CONFIG.timeout - elapsed);

            if (remaining === 0) {
                clearInterval(checkInterval);
                console.log(`\n[${TEST_CONFIG.instanceName}] ‚è∞ Timeout atingido!`);
                console.log(`[${TEST_CONFIG.instanceName}] ‚ùå N√£o foi poss√≠vel conectar em ${TEST_CONFIG.timeout / 1000}s`);
                gracefulExit();
                return;
            }

            const currentSession = getSession(TEST_CONFIG.instanceName);
            const status = currentSession?.status || getInstanceStatus(TEST_CONFIG.instanceName);
            console.log(`[${TEST_CONFIG.instanceName}] ‚è≥ Aguardando... (${Math.round(remaining / 1000)}s restantes) - Status: ${status}`);

            if (status === 'open') {
                clearInterval(checkInterval);
                console.log(`\nüéâ [${TEST_CONFIG.instanceName}] ‚úÖ CONEX√ÉO ESTABELECIDA COM SUCESSO! üéâ`);
                console.log(`[${TEST_CONFIG.instanceName}] ‚è±Ô∏è Tempo para conectar: ${Math.round((Date.now() - startTime) / 1000)}s`);

                // Mostrar informa√ß√µes da sess√£o
                const finalSession = getSession(TEST_CONFIG.instanceName);
                if (finalSession?.number) {
                    console.log(`[${TEST_CONFIG.instanceName}] üìû N√∫mero: ${finalSession.number}`);
                }
                if (finalSession?.sock?.user?.name) {
                    console.log(`[${TEST_CONFIG.instanceName}] üë§ Usu√°rio: ${finalSession.sock.user.name}`);
                }

                console.log(`\n[${TEST_CONFIG.instanceName}] üîÑ Teste conclu√≠do! Pressione Ctrl+C para encerrar.`);
            }
        }, 5000); // Verificar a cada 5 segundos

        // Timeout geral
        setTimeout(() => {
            if (!isShuttingDown) {
                clearInterval(checkInterval);
                console.log(`\n[${TEST_CONFIG.instanceName}] ‚è∞ Timeout geral atingido!`);
                gracefulExit();
            }
        }, TEST_CONFIG.timeout);

    } catch (err) {
        console.error(`\n‚ùå Erro ao iniciar inst√¢ncia de teste:`, err.message);
        console.error('Stack trace:', err.stack);
        gracefulExit();
    }
}

async function gracefulExit() {
    if (isShuttingDown) {
        console.log('‚ö†Ô∏è Shutdown j√° em andamento...');
        return;
    }

    isShuttingDown = true;
    console.log('\nüõë Encerrando teste...');

    try {
        await shutdownAllInstances();
        console.log('‚úÖ Teste encerrado com sucesso');
        process.exit(0);
    } catch (err) {
        console.error('‚ùå Erro durante encerramento:', err.message);
        process.exit(1);
    }
}

// Tratamento de sinais para encerramento graceful
process.on('SIGINT', () => {
    console.log('\nüõë Recebido SIGINT (Ctrl+C)');
    gracefulExit();
});

process.on('SIGTERM', () => {
    console.log('\nüõë Recebido SIGTERM');
    gracefulExit();
});

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (err) => {
    console.error('\n‚ùå Exce√ß√£o n√£o capturada:', err);
    gracefulExit();
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('\n‚ùå Promise rejeitada n√£o tratada:', reason);
    gracefulExit();
});

// Fun√ß√£o para alterar configura√ß√µes via argumentos da linha de comando
function parseArgs() {
    const args = process.argv.slice(2);

    for (let i = 0; i < args.length; i++) {
        switch (args[i]) {
            case '--pairing':
            case '-p':
                TEST_CONFIG.usePairingCode = true;
                if (args[i + 1] && !args[i + 1].startsWith('-')) {
                    TEST_CONFIG.phoneNumber = args[i + 1];
                    i++; // Pular o pr√≥ximo argumento
                }
                break;
            case '--instance':
            case '-i':
                if (args[i + 1] && !args[i + 1].startsWith('-')) {
                    TEST_CONFIG.instanceName = args[i + 1];
                    i++;
                }
                break;
            case '--timeout':
            case '-t':
                if (args[i + 1] && !args[i + 1].startsWith('-')) {
                    TEST_CONFIG.timeout = parseInt(args[i + 1]) * 1000;
                    i++;
                }
                break;
            case '--help':
            case '-h':
                console.log('Uso: node testStartInstance.js [op√ß√µes]');
                console.log('');
                console.log('Op√ß√µes:');
                console.log('  -p, --pairing [n√∫mero]    Usar pairing code (opcionalmente com n√∫mero)');
                console.log('  -i, --instance <nome>     Nome da inst√¢ncia (padr√£o: test)');
                console.log('  -t, --timeout <segundos>  Timeout em segundos (padr√£o: 300)');
                console.log('  -h, --help               Mostrar esta ajuda');
                console.log('');
                console.log('Exemplos:');
                console.log('  node testStartInstance.js                    # QR Code');
                console.log('  node testStartInstance.js -p 5511999999999   # Pairing code');
                console.log('  node testStartInstance.js -i meubot -t 600   # Inst√¢ncia personalizada');
                process.exit(0);
        }
    }
}

// Iniciar teste
console.log('üß™ Teste de Inst√¢ncia WhatsApp - Baileys API');
console.log('‚ïê'.repeat(60));

parseArgs();
testStart();
